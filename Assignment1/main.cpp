#include <glad/glad.h>
#include <GLFW/glfw3.h>

#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>

#include <iostream>

using namespace std;

void framebuffer_size_callback(GLFWwindow* window, int width, int height);
void processInput(GLFWwindow* window);

// settings
const unsigned int SCR_WIDTH = 800;
const unsigned int SCR_HEIGHT = 600;
float rotateAngle = 0.0;
float translate_X = -0.7;
float translate_Y = -0.5;
float scale_X = 1.5;
float scale_Y = 1.5;

const char* vertexShaderSource = "#version 330 core\n"
"layout (location = 0) in vec3 aPos;\n"
"uniform mat4 transform;\n"
"void main()\n"
"{\n"
"   gl_Position = transform * vec4(aPos, 1.0);\n"
"}\0";
const char* fragmentShaderSource = "#version 330 core\n"
"out vec4 FragColor;\n"
"void main()\n"
"{\n"
"   FragColor = vec4(0.0f, 0.0f, 0.0f, 1.0f);\n"
"}\n\0";
const char* fragmentShaderSource1 = "#version 330 core\n"
"out vec4 FragColor;\n"
"void main()\n"
"{\n"
"   FragColor = vec4(1.0f, 1.0f, 1.0f, 1.0f);\n"
"}\n\0";

int main()
{
    // glfw: initialize and configure
    // ------------------------------
    glfwInit();
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

#ifdef __APPLE__
    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
#endif

    // glfw window creation
    // --------------------
    GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, "CSE 4208: Computer Graphics Laboratory", NULL, NULL);
    if (window == NULL)
    {
        std::cout << "Failed to create GLFW window" << std::endl;
        glfwTerminate();
        return -1;
    }
    glfwMakeContextCurrent(window);
    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);

    // glad: load all OpenGL function pointers
    // ---------------------------------------
    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
    {
        std::cout << "Failed to initialize GLAD" << std::endl;
        return -1;
    }


    // build and compile our shader program
    // ------------------------------------
    // vertex shader
    unsigned int vertexShader = glCreateShader(GL_VERTEX_SHADER);
    glShaderSource(vertexShader, 1, &vertexShaderSource, NULL);
    glCompileShader(vertexShader);
    // check for shader compile errors
    int success;
    char infoLog[512];
    glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);
    if (!success)
    {
        glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);
        std::cout << "ERROR::SHADER::VERTEX::COMPILATION_FAILED\n" << infoLog << std::endl;
    }
    // fragment shader
    unsigned int fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
    glShaderSource(fragmentShader, 1, &fragmentShaderSource, NULL);
    glCompileShader(fragmentShader);
    // check for shader compile errors
    glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &success);
    if (!success)
    {
        glGetShaderInfoLog(fragmentShader, 512, NULL, infoLog);
        std::cout << "ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\n" << infoLog << std::endl;
    }
    // link shaders
    unsigned int shaderProgram = glCreateProgram();
    glAttachShader(shaderProgram, vertexShader);
    glAttachShader(shaderProgram, fragmentShader);
    glLinkProgram(shaderProgram);
    // check for linking errors
    glGetProgramiv(shaderProgram, GL_LINK_STATUS, &success);
    if (!success) {
        glGetProgramInfoLog(shaderProgram, 512, NULL, infoLog);
        std::cout << "ERROR::SHADER::PROGRAM::LINKING_FAILED\n" << infoLog << std::endl;
    }
    glDeleteShader(vertexShader);
    glDeleteShader(fragmentShader);

    //asdasd
    //unsigned int vertexShader1 = glCreateShader(GL_VERTEX_SHADER);
    //glShaderSource(vertexShader1, 1, &vertexShaderSource, NULL);
    //glCompileShader(vertexShader1);
    //// check for shader compile errors
    //glGetShaderiv(vertexShader1, GL_COMPILE_STATUS, &success);
    //if (!success)
    //{
    //    glGetShaderInfoLog(vertexShader1, 512, NULL, infoLog);
    //    std::cout << "ERROR::SHADER::VERTEX::COMPILATION_FAILED\n" << infoLog << std::endl;
    //}
    //// fragment shader
    //unsigned int fragmentShader1 = glCreateShader(GL_FRAGMENT_SHADER);
    //glShaderSource(fragmentShader1, 1, &fragmentShaderSource1, NULL);
    //glCompileShader(fragmentShader1);
    //// check for shader compile errors
    //glGetShaderiv(fragmentShader1, GL_COMPILE_STATUS, &success);
    //if (!success)
    //{
    //    glGetShaderInfoLog(fragmentShader1, 512, NULL, infoLog);
    //    std::cout << "ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\n" << infoLog << std::endl;
    //}
    //// link shaders
    //unsigned int shaderProgram1 = glCreateProgram();
    //glAttachShader(shaderProgram1, vertexShader1);
    //glAttachShader(shaderProgram1, fragmentShader1);
    //glLinkProgram(shaderProgram1);
    //// check for linking errors
    //glGetProgramiv(shaderProgram1, GL_LINK_STATUS, &success);
    //if (!success) {
    //    glGetProgramInfoLog(shaderProgram1, 512, NULL, infoLog);
    //    std::cout << "ERROR::SHADER::PROGRAM::LINKING_FAILED\n" << infoLog << std::endl;
    //}
    //glDeleteShader(vertexShader1);
    //glDeleteShader(fragmentShader1);

    // set up vertex data (and buffer(s)) and configure vertex attributes
    // ------------------------------------------------------------------

    //lines, line_strip, line_loop, triangles, triangle_strip
    /*float vertices[] = {
        -0.75f, 0.5f, 0.0f,
        -0.5f, -0.5f, 0.0f,
        -0.25f, 0.5f, 0.0f,
         0.0f, -0.5f, 0.0f,
         0.25f, 0.5f, 0.0f,
         0.5f, -0.5f, 0.0f
    };*/

    //triangle_fan
    /*float vertices[] = {
        0.0f, 0.0f, 0.0f,
        0.5f, 0.0f, 0.0f,
        0.33f, 0.33f, 0.0f,
         0.0f, 0.5f, 0.0f,
        -0.33f, 0.33f, 0.0f,
        -0.5f, 0.0f, 0.0f
        //-0.33f, -0.33f, 0.0f,
        //0.0f, -0.5f, 0.0f,
       // 0.33f, -0.33f, 0.0f
    };*/

    //triangle
    float vertices2[] = {
        -0.5f, -0.5f, 0.0f, // left
         0.5f, -0.5f, 0.0f, // right
         0.0f,  0.5f, 0.0f  // top
    };
    float vertices[] = {
0.00460829493087557,0.672684516339938,0,
0.010752688172043,0.681725351246278,0,
0.0168970814132104,0.690766186152618,0,
0.0168970814132104,0.690766186152618,0,
0.0230414746543778,0.697518691539508,0,
0.0230414746543778,0.699807021058958,0,
0.0230414746543778,0.699807021058958,0,
0.0291858678955453,0.708847855965299,0,
0.0307219662058371,0.713396394211334,0,
0.0337941628264208,0.715628482145054,0,
0.0353302611367127,0.72017702039109,0,
0.0445468509984639,0.726873284192247,0,
0.0460829493087557,0.726845163399382,0,
0.0476190476190476,0.731393701645418,0,
0.053763440860215,0.738146207032307,0,
0.0583717357910906,0.744926833212062,0,
0.0599078341013824,0.749475371458098,0,
0.0660522273425499,0.758516206364438,0,
0.0660522273425499,0.758516206364438,0,
0.0675883256528417,0.767641403649375,0,
0.0706605222734255,0.779026809660898,0,
0.0706605222734255,0.781315139180349,0,
0.0706605222734255,0.788180127738701,0,
0.0721966205837173,0.792728665984737,0,
0.0721966205837173,0.797305325023639,0,
0.0768049155145929,0.801797621683943,0,
0.0783410138248847,0.806346159929979,0,
0.0829493087557603,0.815415115629185,0,
0.0844854070660522,0.819963653875221,0,
0.086021505376344,0.824512192121256,0,
0.0875576036866359,0.829060730367292,0,
0.0890937019969278,0.833609268613328,0,
0.0937019969278033,0.838101565273633,0,
0.0998463901689708,0.844854070660522,0,
0.102918586789554,0.849374488113692,0,
0.102918586789554,0.849374488113692,0,
0.102918586789554,0.856239476672044,0,
0.0998463901689708,0.863160706816128,0,
0.0967741935483871,0.870081936960212,0,
0.0921658986175115,0.879319617416613,0,
0.0890937019969278,0.890817506599598,0,
0.0875576036866359,0.90686393402862,0,
0.0875576036866359,0.913728922586972,0,
0.0890937019969278,0.918277460833008,0,
0.0906298003072196,0.922825999079044,0,
0.0952380952380952,0.927318295739348,0,
0.101382488479262,0.918052494490082,0,
0.109062980030721,0.899605254370147,0,
0.115207373271889,0.897204441679233,0,
0.119815668202764,0.894831749781185,0,
0.127496159754224,0.892402816297405,0,
0.133640552995391,0.892290333125942,0,
0.141321044546851,0.887573070122712,0,
0.145929339477726,0.887488707744114,0,
0.145929339477726,0.887488707744114,0,
0.142857142857142,0.905851585485452,0,
0.139784946236559,0.917349474668438,0,
0.138248847926267,0.926530913539107,0,
0.138248847926267,0.940260890655812,0,
0.139784946236559,0.944809428901847,0,
0.139784946236559,0.944809428901847,0,
0.147465437788018,0.935515506859716,0,
0.153609831029185,0.926249705610449,0,
0.164362519201228,0.919187871502037,0,
0.170506912442396,0.914498729291672,0,
0.176651305683563,0.909809587081307,0,
0.181259600614439,0.900571906624907,0,
0.184331797235023,0.889074017441921,0,
0.187403993855606,0.879864457778387,0,
0.179723502304147,0.86398675510656,0,
0.178187403993855,0.854861557821622,0,
0.176651305683563,0.850313019575587,0,
0.176651305683563,0.850313019575587,0,
0.188940092165898,0.856953041791013,0,
0.202764976958525,0.870429931771926,0,
0.21505376344086,0.874781624467901,0,
0.219662058371735,0.876985591608755,0,
0.235023041474654,0.878992713199548,0,
0.241167434715821,0.878880230028085,0,
0.244239631336405,0.878823988442354,0,
0.247311827956989,0.874191087817721,0,
0.248847926267281,0.867297978466502,0,
0.247311827956989,0.851307792623213,0,
0.230414746543778,0.83331048518913,0,
0.218125960061443,0.824382133454252,0,
0.213517665130568,0.822178166313399,0,
0.213517665130568,0.817601507274497,0,
0.2073732718894,0.808560672368157,0,
0.216589861751152,0.808391947610962,0,
0.230414746543778,0.810427189994621,0,
0.244239631336405,0.796444125742125,0,
0.250384024577573,0.796331642570662,0,
0.262672811059907,0.796106676227736,0,
0.271889400921659,0.795937951470541,0,
0.28110599078341,0.798057556232798,0,
0.287250384024577,0.797945073061335,0,
0.299539170506912,0.800008436237859,0,
0.311827956989247,0.802071799414384,0,
0.333333333333333,0.806254767353165,0,
0.341013824884792,0.812979151947189,0,
0.354838709677419,0.819591053369749,0,
0.36405529953917,0.819422328612555,0,
0.379416282642089,0.819141120683897,0,
0.391705069124424,0.818916154340971,0,
0.41321044546851,0.813945804201949,0,
0.419354838709677,0.811544991511035,0,
0.422427035330261,0.811488749925304,0,
0.445468509984639,0.811066938032317,0,
0.457757296466974,0.808553642169941,0,
0.4715821812596,0.801435566475796,0,
0.490015360983102,0.791944798883604,0,
0.508448540706605,0.787030690330313,0,
0.516129032258064,0.786890086365985,0,
0.534562211981566,0.786552636851596,0,
0.554531490015361,0.788475396063792,0,
0.56221198156682,0.788334792099463,0,
0.571428571428571,0.788166067342268,0,
0.58678955453149,0.787884859413611,0,
0.594470046082949,0.790032584968733,0,
0.605222734254992,0.792124068938123,0,
0.614439324116743,0.79424367370038,0,
0.620583717357911,0.798707849567818,0,
0.632872503840245,0.800771212744343,0,
0.649769585253456,0.807326872581172,0,
0.655913978494623,0.81179104844861,0,
0.665130568356374,0.816198982730318,0,
0.685099846390169,0.820410071461964,0,
0.695852534562212,0.822501555431355,0,
0.71121351766513,0.826797006541599,0,
0.7357910906298,0.833212062414099,0,
0.76036866359447,0.835050459247698,0,
0.774193548387096,0.834797372111906,0,
0.791090629800307,0.834488043390383,0,
0.797235023041474,0.83437556021892,0,
0.811059907834101,0.829545814044226,0,
0.820276497695852,0.827088759767581,0,
0.834101382488479,0.822259013592888,0,
0.846390168970814,0.81745738821106,0,
0.852534562211981,0.812768246000696,0,
0.864823348694316,0.807966620618868,0,
0.877112135176651,0.798588336198139,0,
0.878648233486943,0.798560215405273,0,
0.886328725038402,0.793842952402043,0,
0.889400921658986,0.784633392738508,0,
0.895545314900153,0.766214273411438,0,
0.895545314900153,0.766214273411438,0,
0.895545314900153,0.775367591489242,0,
0.895545314900153,0.775367591489242,0,
0.906298003072196,0.775170745939181,0,
0.90937019969278,0.77511450435345,0,
0.920122887864823,0.770340999764488,0,
0.92626728110599,0.765651857554123,0,
0.941628264208909,0.756217331547663,0,
0.943164362519201,0.756189210754797,0,
0.947772657450076,0.749239859817847,0,
0.95084485407066,0.740030300154312,0,
0.956989247311828,0.728476169385595,0,
0.961597542242703,0.726103477487547,0,
0.964669738863287,0.714605588304562,0,
0.970814132104454,0.700763128016394,0,
0.970814132104454,0.691609809938591,0,
0.973886328725038,0.682400250275056,0,
0.97542242703533,0.664065493326584,0,
0.97542242703533,0.654912175248781,0,
0.97542242703533,0.632028880054273,0,
0.97542242703533,0.62516389149592,0,
0.978494623655914,0.59993602519623,0,
0.980030721966205,0.581601268247758,0,
0.976958525345622,0.561062544158432,0,
0.97542242703533,0.549649017354044,0,
0.973886328725038,0.519928854394049,0,
0.973886328725038,0.510775536316246,0,
0.973886328725038,0.49475722968009,0,
0.97542242703533,0.45353917753711,0,
0.969278033794162,0.433056695033516,0,
0.969278033794162,0.423903376955713,0,
0.970814132104454,0.417010267604495,0,
0.970814132104454,0.400991960968339,0,
0.970814132104454,0.384973654332183,0,
0.973886328725038,0.371187435629747,0,
0.97542242703533,0.362005996759078,0,
0.978494623655914,0.357373096134445,0,
0.981566820276497,0.350451865990361,0,
0.986175115207373,0.33892585601451,0,
0.989247311827957,0.329716296350975,0,
0.99231950844854,0.315930077648539,0,
0.995391705069124,0.306720517985004,0,
0.998463901689708,0.292934299282568,0,
1,0.274599542334096,0,
0.998463901689708,0.247167708893552,0,
0.998463901689708,0.251744367932453,0,
0.998463901689708,0.240302720335199,0,
0.996927803379416,0.240330841128065,0,
0.993855606758832,0.240387082713797,0,
0.987711213517665,0.249652883963063,0,
0.981566820276497,0.258918685212329,0,
0.97542242703533,0.263607827422694,0,
0.963133640552995,0.266121123285071,0,
0.956989247311828,0.270810265495435,0,
0.949308755760368,0.280104187537567,0,
0.944700460829493,0.289341867993967,0,
0.943164362519201,0.298523306864637,0,
0.943164362519201,0.30767662494244,0,
0.943164362519201,0.316829943020243,0,
0.943164362519201,0.332848249656399,0,
0.944700460829493,0.351126765019139,0,
0.944700460829493,0.355703424058041,0,
0.947772657450076,0.373953818627916,0,
0.947772657450076,0.389972125264071,0,
0.949308755760368,0.40138565206846,0,
0.949308755760368,0.412827299665714,0,
0.949308755760368,0.426557276782418,0,
0.95084485407066,0.435682474067356,0,
0.95084485407066,0.444835792145159,0,
0.95084485407066,0.460854098781315,0,
0.95084485407066,0.470007416859118,0,
0.95084485407066,0.488314053014724,0,
0.95084485407066,0.499755700611978,0,
0.95084485407066,0.513485677728683,0,
0.95084485407066,0.524927325325937,0,
0.952380952380952,0.540917511169227,0,
0.953917050691244,0.554619367493066,0,
0.955453149001536,0.563744564778003,0,
0.955453149001536,0.572897882855807,0,
0.955453149001536,0.584339530453061,0,
0.955453149001536,0.604934496128118,0,
0.955453149001536,0.61179948468647,0,
0.955453149001536,0.641547768439331,0,
0.953917050691244,0.646152548271098,0,
0.95084485407066,0.659938766973534,0,
0.946236559139785,0.673753106468836,0,
0.941628264208909,0.685279116444688,0,
0.938556067588325,0.692200346588772,0,
0.930875576036866,0.701494268630904,0,
0.92626728110599,0.701578631009501,0,
0.924731182795698,0.701606751802367,0,
0.929339477726574,0.692369071345966,0,
0.930875576036866,0.680899302955846,0,
0.932411674347158,0.667141205046276,0,
0.930875576036866,0.646574360164084,0,
0.929339477726574,0.635160833359696,0,
0.927803379416282,0.628323965594209,0,
0.927803379416282,0.614593988477505,0,
0.92626728110599,0.591738814075862,0,
0.920122887864823,0.573544661091719,0,
0.917050691244239,0.562159255080196,0,
0.913978494623656,0.546197190029772,0,
0.912442396313364,0.527918674667032,0,
0.906298003072196,0.502859533124536,0,
0.901689708141321,0.489213918386428,0,
0.898617511520737,0.473251853336004,0,
0.897081413210445,0.461838326531616,0,
0.897081413210445,0.438955031337108,0,
0.897081413210445,0.418360065662051,0,
0.897081413210445,0.4160717361426,0,
0.898617511520737,0.400025308713579,0,
0.900153609831029,0.383978881284557,0,
0.903225806451612,0.370192662582121,0,
0.907834101382488,0.354089993567368,0,
0.913978494623656,0.335670874240299,0,
0.918586789554531,0.319568205225546,0,
0.923195084485407,0.305753865730244,0,
0.92626728110599,0.289679317508356,0,
0.930875576036866,0.280441637051956,0,
0.930875576036866,0.271288318974153,0,
0.930875576036866,0.23467504666294,0,
0.929339477726574,0.21868486081965,0,
0.92626728110599,0.182127830094169,0,
0.92626728110599,0.161532864419112,0,
0.921658986175115,0.138733931603201,0,
0.920122887864823,0.12045541624046,0,
0.920122887864823,0.106725439123755,0,
0.920122887864823,0.0884188029681496,0,
0.920122887864823,0.0701121668125432,0,
0.920122887864823,0.0563821896958383,0,
0.920122887864823,0.0495172011374858,0,
0.913978494623656,0.0427646957505967,0,
0.910906298003072,0.0245143011807216,0,
0.910906298003072,0.0130726535834677,0,
0.913978494623656,0.00615142343938379,0,
0.913978494623656,-0.000713565118968473,0,
0.904761904761904,-0.00283316988122495,0,
0.889400921658986,-0.0117052800303703,0,
0.877112135176651,-0.0114803136874441,0,
0.869431643625192,-0.00905138020366469,0,
0.860215053763441,0.000270662631332907,0,
0.857142857142857,0.00719189277541665,0,
0.858678955453149,0.0254704081381573,0,
0.866359447004608,0.0344831222516319,0,
0.870967741935483,0.0458404074702887,0,
0.875576036866359,0.0617743517278468,0,
0.877112135176651,0.0731878785322353,0,
0.878648233486943,0.0891780643755251,0,
0.881720430107527,0.112005117984301,0,
0.881720430107527,0.132600083659358,0,
0.881720430107527,0.148618390295514,0,
0.881720430107527,0.162348367412219,0,
0.881720430107527,0.180655003567825,0,
0.886328725038402,0.198877277344834,0,
0.894009216589861,0.214754980016661,0,
0.895545314900153,0.244475142976656,0,
0.895545314900153,0.262781779132262,0,
0.895545314900153,0.276511756248967,0,
0.895545314900153,0.299395051443475,0,
0.890937019969278,0.315497720458228,0,
0.886328725038402,0.333888718992431,0,
0.883256528417818,0.352251596733769,0,
0.878648233486943,0.368354265748522,0,
0.878648233486943,0.379795913345776,0,
0.880184331797235,0.398074428708517,0,
0.886328725038402,0.418556911212111,0,
0.887864823348694,0.427682108497049,0,
0.890937019969278,0.455085821144727,0,
0.889400921658986,0.443672294340338,0,
0.880184331797235,0.418669394383574,0,
0.878648233486943,0.400390879020834,0,
0.878648233486943,0.370642595267973,0,
0.880184331797235,0.336289531683345,0,
0.887864823348694,0.310977303005058,0,
0.89247311827957,0.299451293029206,0,
0.895545314900153,0.287953403846221,0,
0.898617511520737,0.262725537546531,0,
0.898617511520737,0.248995560429826,0,
0.89247311827957,0.226224748406781,0,
0.886328725038402,0.208030595422637,0,
0.883256528417818,0.198933518930566,0,
0.874039938556067,0.180795607532154,0,
0.870967741935483,0.167121872001181,0,
0.8678955453149,0.162601454548011,0,
0.863287250384024,0.148955839809903,0,
0.860215053763441,0.13757043379838,0,
0.857142857142857,0.117031709709055,0,
0.852534562211981,0.0965211064125952,0,
0.852534562211981,0.0805027997764395,0,
0.852534562211981,0.0621961636208332,0,
0.852534562211981,0.05304284554303,0,
0.852534562211981,0.0507545160235791,0,
0.846390168970814,0.0440020106366898,0,
0.844854070660522,0.0303001543128509,0,
0.844854070660522,0.0165701771961461,0,
0.844854070660522,0.00741685911834277,0,
0.835637480798771,0.000720595317184935,0,
0.817204301075268,-0.00123028468787689,0,
0.811059907834101,-0.00111780151641394,0,
0.792626728110599,0.00379630703687672,0,
0.789554531490015,0.00614087814205932,0,
0.784946236559139,0.0176668881179105,0,
0.797235023041474,0.047190205527845,0,
0.807987711213517,0.0607233370944895,0,
0.809523809523809,0.0652718753405252,0,
0.815668202764977,0.0857543578441193,0,
0.817204301075268,0.0994562141679584,0,
0.821812596006144,0.122255146983869,0,
0.823348694316436,0.140533662346609,0,
0.824884792626728,0.154235518670448,0,
0.827956989247311,0.172485913240323,0,
0.827956989247311,0.19079254939593,0,
0.829493087557603,0.20907106475867,0,
0.829493087557603,0.241107678030982,0,
0.827956989247311,0.257154105460003,0,
0.823348694316436,0.291563410630362,0,
0.821812596006144,0.305321508539933,0,
0.817204301075268,0.323712507074136,0,
0.811059907834101,0.348996614959558,0,
0.807987711213517,0.365071163181445,0,
0.804915514592934,0.371992393325529,0,
0.80184331797235,0.381201952989064,0,
0.786482334869431,0.40436645611223,0,
0.784946236559139,0.406682906424546,0,
0.778801843317972,0.415948707673812,0,
0.763440860215053,0.429959892719175,0,
0.754224270353302,0.439281935554172,0,
0.748079877112135,0.441682748245086,0,
0.7357910906298,0.448772703146365,0,
0.729646697388633,0.448885186317828,0,
0.709677419354838,0.451539086144533,0,
0.709677419354838,0.451539086144533,0,
0.708141321044546,0.451567206937399,0,
0.708141321044546,0.451567206937399,0,
0.717357910906298,0.451398482180204,0,
0.7357910906298,0.439619385068562,0,
0.743471582181259,0.437190451584782,0,
0.758832565284178,0.427755925578321,0,
0.769585253456221,0.420694091469908,0,
0.784946236559139,0.402106247385645,0,
0.791090629800307,0.395128775655829,0,
0.800307219662058,0.378941744262479,0,
0.809523809523809,0.36504304238858,0,
0.814132104454685,0.339787055296024,0,
0.820276497695852,0.319079606449503,0,
0.821812596006144,0.300744849501031,0,
0.821812596006144,0.282438213345425,0,
0.821812596006144,0.270996565748171,0,
0.821812596006144,0.270996565748171,0,
0.821812596006144,0.266419906709269,0,
0.812596006144393,0.259723642908111,0,
0.804915514592934,0.25986424687244,0,
0.803379416282642,0.246162390548601,0,
0.803379416282642,0.234720742951347,0,
0.803379416282642,0.232432413431896,0,
0.797235023041474,0.227968237564458,0,
0.792626728110599,0.223475940904153,0,
0.784946236559139,0.225904874387933,0,
0.780337941628264,0.232854225324883,0,
0.778801843317972,0.23745900515665,0,
0.77726574500768,0.253505432585671,0,
0.77726574500768,0.258082091624573,0,
0.77726574500768,0.264947080182925,0,
0.772657450076804,0.271896431119875,0,
0.761904761904762,0.274381606189386,0,
0.75268817204301,0.256243694790974,0,
0.751152073732719,0.237965179428233,0,
0.751152073732719,0.237965179428233,0,
0.737327188940092,0.235929937044575,0,
0.734254992319508,0.235986178630306,0,
0.731182795698924,0.245195738293841,0,
0.729646697388633,0.263530495242313,0,
0.729646697388633,0.265818824761764,0,
0.729646697388633,0.268107154281214,0,
0.729646697388633,0.277260472359018,0,
0.714285714285714,0.293559986923831,0,
0.703533026113671,0.309775139110047,0,
0.698924731182795,0.321301149085898,0,
0.698924731182795,0.335031126202603,0,
0.705069124423963,0.350936949667295,0,
0.708141321044546,0.357745696639916,0,
0.717357910906298,0.378171937557779,0,
0.720430107526881,0.389557343569301,0,
0.720430107526881,0.391845673088752,0,
0.715821812596006,0.371335069792292,0,
0.71121351766513,0.364554443612537,0,
0.698924731182795,0.346472773799857,0,
0.692780337941628,0.342008597932418,0,
0.691244239631336,0.344325048244735,0,
0.68663594470046,0.33754442206498,0,
0.680491551459293,0.328503587158639,0,
0.674347158218126,0.324039411291201,0,
0.662058371735791,0.321976048114676,0,
0.651305683563748,0.319884564145286,0,
0.637480798771121,0.313272662722725,0,
0.626728110599078,0.313469508272785,0,
0.609831029185867,0.306913848435956,0,
0.600614439324116,0.3047942436737,0,
0.588325652841782,0.302730880497175,0,
0.577572964669739,0.298351067008334,0,
0.56221198156682,0.29634394541754,0,
0.552995391705069,0.296512670174735,0,
0.543778801843318,0.29668139493193,0,
0.531490015360983,0.296906361274856,0,
0.523809523809523,0.301623624278086,0,
0.517665130568356,0.301736107449549,0,
0.503840245775729,0.306565853624242,0,
0.502304147465437,0.306593974417108,0,
0.49615975422427,0.306706457588571,0,
0.490015360983102,0.306818940760034,0,
0.485407066052227,0.304614973619181,0,
0.4715821812596,0.304868060754972,0,
0.459293394777265,0.302804697578448,0,
0.451612903225806,0.300656972023326,0,
0.437788018433179,0.296333400120216,0,
0.428571428571428,0.29421379535796,0,
0.420890937019969,0.294354399322288,0,
0.40552995391705,0.292347277731495,0,
0.397849462365591,0.290199552176373,0,
0.387096774193548,0.290396397726434,0,
0.385560675883256,0.288136188999848,0,
0.384024577572964,0.285875980273263,0,
0.391705069124424,0.285735376308935,0,
0.40552995391705,0.280905630134241,0,
0.407066052227342,0.280877509341376,0,
0.407066052227342,0.262570873185769,0,
0.407066052227342,0.23739924847181,0,
0.407066052227342,0.223669271355105,0,
0.408602150537634,0.203046184887182,0,
0.411674347158218,0.186971636665296,0,
0.41321044546851,0.170925209236274,0,
0.41321044546851,0.150330243561217,0,
0.411674347158218,0.134340057717927,0,
0.411674347158218,0.11374509204287,0,
0.414746543778801,0.0953822143015321,0,
0.416282642089093,0.0862007754308631,0,
0.422427035330261,0.0563400085065397,0,
0.422427035330261,0.0540516789870892,0,
0.422427035330261,0.0494750199481877,0,
0.419354838709677,0.0335129548977632,0,
0.417818740399385,0.0266760871322768,0,
0.419354838709677,0.0106296597032553,0,
0.422427035330261,0.00599675907862229,0,
0.422427035330261,0.00599675907862229,0,
0.422427035330261,-0.000868229479729976,0,
0.422427035330261,-0.00773321803808246,0,
0.411674347158218,-0.00982470200747287,0,
0.402457757296467,-0.00965597725027844,0,
0.387096774193548,-0.0116630988410717,0,
0.377880184331797,-0.0114943740838773,0,
0.371735791090629,-0.00909356139296324,0,
0.370199692780338,0.00924119555550873,0,
0.374807987711213,0.0274634693325181,0,
0.377880184331797,0.0434255343829419,0,
0.377880184331797,0.0594438410190973,0,
0.379416282642089,0.0731456973429367,0,
0.380952380952381,0.10057753078348,0,
0.379416282642089,0.121200617251403,0,
0.373271889400921,0.137331407059022,0,
0.373271889400921,0.148773054656276,0,
0.376344086021505,0.162446790187249,0,
0.379416282642089,0.176120525718222,0,
0.379416282642089,0.189850502834927,0,
0.376344086021505,0.196771732979011,0,
0.373271889400921,0.205981292642546,0,
0.373271889400921,0.2174229402398,0,
0.371735791090629,0.219739390552116,0,
0.373271889400921,0.228864587837054,0,
0.370199692780338,0.247227465578391,0,
0.367127496159754,0.256437025241926,0,
0.376344086021505,0.281439925198691,0,
0.376344086021505,0.283728254718141,0,
0.382488479262672,0.31794071433844,0,
0.387096774193548,0.343027976673802,0,
0.391705069124424,0.368115239009163,0,
0.397849462365591,0.379444403434955,0,
0.397849462365591,0.381732732954405,0,
0.397849462365591,0.372579414876602,0,
0.390168970814132,0.345260064607521,0,
0.384024577572964,0.324777582103927,0,
0.373271889400921,0.290649484862225,0,
0.367127496159754,0.254148695722476,0,
0.367127496159754,0.231265400527967,0,
0.368663594470046,0.210642314060045,0,
0.371735791090629,0.180837788721453,0,
0.370199692780338,0.171712591436515,0,
0.360983102918586,0.158151339077005,0,
0.359447004608295,0.149026141792067,0,
0.357910906298003,0.135324285468228,0,
0.357910906298003,0.121594308351524,0,
0.357910906298003,0.0964226836375652,0,
0.357910906298003,0.0758277179625079,0,
0.353302611367127,0.0576054441854987,0,
0.348694316436252,0.0439598294473912,0,
0.34715821812596,0.0279696436041017,0,
0.34715821812596,0.0142396664873967,0,
0.34715821812596,-0.00177864014875872,0,
0.342549923195084,-0.00855926632851389,0,
0.317972350230414,-0.0149743222010143,0,
0.311827956989247,-0.0148618390295514,0,
0.29800307219662,-0.0146087518937596,0,
0.290322580645161,-0.00760315937107836,0,
0.290322580645161,0.00612681774562617,0,
0.29800307219662,0.0265811794563548,0,
0.301075268817204,0.0356782559484263,0,
0.302611367127496,0.0448034532333641,0,
0.307219662058371,0.0630257270103731,0,
0.313364055299539,0.0926615275917706,0,
0.314900153609831,0.115516701993412,0,
0.319508448540706,0.145180623367675,0,
0.319508448540706,0.172640577601085,0,
0.317972350230414,0.202416982146811,0,
0.311827956989247,0.229989419551684,0,
0.307219662058371,0.25524540664424,0,
0.299539170506912,0.28742262388088,0,
0.291858678955453,0.317311511598069,0,
0.287250384024577,0.337990839651724,0,
0.28110599078341,0.358698288498244,0,
0.28110599078341,0.379293254173301,0,
0.28110599078341,0.381581583692752,0,
0.287250384024577,0.335702510132273,0,
0.290322580645161,0.321916291429837,0,
0.296466973886328,0.289767194986062,0,
0.296466973886328,0.280613876908259,0,
0.296466973886328,0.276037217869357,0,
0.27342549923195,0.287900677359598,0,
0.259600614439324,0.299595412092644,0,
0.239631336405529,0.325132607113857,0,
0.227342549923195,0.341375880092939,0,
0.219662058371735,0.357534790693423,0,
0.211981566820276,0.378270360332809,0,
0.204301075268817,0.417312566127802,0,
0.201228878648233,0.426522125791336,0,
0.198156682027649,0.458614980649379,0,
0.195084485407066,0.474689528871266,0,
0.19047619047619,0.502233845483273,0,
0.188940092165898,0.515991943392844,0,
0.178187403993855,0.543648743176314,0,
0.172043010752688,0.562067862503383,0,
0.164362519201228,0.571361784545515,0,
0.156682027649769,0.580655706587647,0,
0.153609831029185,0.587576936731731,0,
0.155145929339477,0.587548815938865,0,
0.182795698924731,0.596195959745085,0,
0.187403993855606,0.600688256405389,0,
0.188940092165898,0.605236794651425,0,
0.162826420890937,0.596561530052339,0,
0.147465437788018,0.594554408461546,0,
0.0983102918586789,0.5931659443138,0,
0.0921658986175115,0.593278427485263,0,
0.0844854070660522,0.593419031449591,0,
0.0721966205837173,0.595932327311968,0,
0.0476190476190476,0.598670589517271,0,
0.0353302611367127,0.598895555860197,0,
0.0291858678955453,0.59900803903166,0,
0.0230414746543778,0.612850499319828,0,
0.0184331797235023,0.624376509295679,0,
0.0138248847926267,0.635902519271531,0,
0.00614439324116743,0.647484770833113,0,
0.00614439324116743,0.649773100352564,0,
0.00460829493087557,0.665819527781585,0,
0.00460829493087557,0.665819527781585,0

    };
    float spot1[] = {
        0.631336405529954,0.6337512786173,0,
0.580645161290322,0.584336015353953,0,
0.577572964669739,0.593545575017487,0,
0.574500768049155,0.611908452758825,0,
0.572964669738863,0.623378221148945,0,
0.571428571428571,0.639424648577966,0,
0.572964669738863,0.659991493460158,0,
0.582181259600614,0.67812940485857,0,
0.592933947772657,0.696239195464116,0,
0.614439324116743,0.716440470039052,0,
0.643625192012288,0.725059493052406,0,
0.666666666666666,0.726926010678871,0,
0.68663594470046,0.726560440371616,0,
0.706605222734255,0.714753222467107,0,
0.718894009216589,0.698509949488025,0,
0.729646697388633,0.682294797301809,0,
0.738863287250384,0.661531106869558,0,
0.743471582181259,0.640851778815903,0,
0.743471582181259,0.622545142660297,0,
0.738863287250384,0.604322868883288,0,
0.725038402457757,0.588557649382924,0,
0.71121351766513,0.575080759402011,0,
0.695852534562212,0.566208649252865,0,
0.680491551459293,0.55962486862317,0,
0.668202764976958,0.559849834966096,0,
0.662058371735791,0.559962318137559,0,
0.655913978494623,0.560074801309022,0,
0.643625192012288,0.560299767651948,0,
0.634408602150537,0.562756821928594,0,
0.620583717357911,0.567586568103287,0,
0.615975422427035,0.569959260001335,0,
0.609831029185867,0.570071743172798,0,
0.589861751152073,0.570437313480053,0,
0.582181259600614,0.572866246963833,0,
0.582181259600614,0.575154576483283,0

    };

    unsigned int VBO, VAO;
    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);
    // bind the Vertex Array Object first, then bind and set vertex buffer(s), and then configure vertex attributes(s).
    glBindVertexArray(VAO);

    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    // note that this is allowed, the call to glVertexAttribPointer registered VBO as the vertex attribute's bound vertex buffer object so afterwards we can safely unbind
    glBindBuffer(GL_ARRAY_BUFFER, 0);

    // You can unbind the VAO afterwards so other VAO calls won't accidentally modify this VAO, but this rarely happens. Modifying other
    // VAOs requires a call to glBindVertexArray anyways so we generally don't unbind VAOs (nor VBOs) when it's not directly necessary.
    glBindVertexArray(0);


    // uncomment this call to draw in wireframe polygons.
    //glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
    unsigned int VBO1, VAO1;
    glGenVertexArrays(1, &VAO1);
    glGenBuffers(1, &VBO1);
    // bind the Vertex Array Object first, then bind and set vertex buffer(s), and then configure vertex attributes(s).
    glBindVertexArray(VAO1);
    glBindBuffer(GL_ARRAY_BUFFER, VBO1);
    glBufferData(GL_ARRAY_BUFFER, sizeof(spot1), spot1, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    // note that this is allowed, the call to glVertexAttribPointer registered VBO as the vertex attribute's bound vertex buffer object so afterwards we can safely unbind
    glBindBuffer(GL_ARRAY_BUFFER, 0);

    // You can unbind the VAO afterwards so other VAO calls won't accidentally modify this VAO, but this rarely happens. Modifying other
    // VAOs requires a call to glBindVertexArray anyways so we generally don't unbind VAOs (nor VBOs) when it's not directly necessary.
    glBindVertexArray(0);

    // render loop
    // -----------
    while (!glfwWindowShouldClose(window))
    {
        // input
        // -----
        processInput(window);

        // render
        // ------
        glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT);

        // create transformations
        /*glm::mat4 trans = glm::mat4(1.0f); // make sure to initialize matrix to identity matrix first
        trans = glm::translate(trans, glm::vec3(translate_X, translate_Y, 0.0f));
        trans = glm::rotate(trans, glm:: radians(rotateAngle), glm::vec3(0.0f, 0.0f, 1.0f));
        trans = glm::scale(trans,glm::vec3(scale_X, scale_Y, 1.0));*/
        glm::mat4 translationMatrix;
        glm::mat4 rotationMatrix;
        glm::mat4 scaleMatrix;
        glm::mat4 modelMatrix;
        glm::mat4 identityMatrix = glm::mat4(1.0f);
        translationMatrix = glm::translate(identityMatrix, glm::vec3(translate_X, translate_Y, 0.0f));
        rotationMatrix = glm::rotate(identityMatrix, glm::radians(rotateAngle), glm::vec3(0.0f, 0.0f, 1.0f));
        scaleMatrix = glm::scale(identityMatrix, glm::vec3(scale_X, scale_Y, 1.0f));
        modelMatrix = translationMatrix * rotationMatrix * scaleMatrix;
        //modelMatrix = rotationMatrix * scaleMatrix;

        // get matrix's uniform location and set matrix
        glUseProgram(shaderProgram);
        unsigned int transformLoc = glGetUniformLocation(shaderProgram, "transform");
        glUniformMatrix4fv(transformLoc, 1, GL_FALSE, glm::value_ptr(modelMatrix));

        // draw our first triangle
        glBindVertexArray(VAO); // seeing as we only have a single VAO there's no need to bind it every time, but we'll do so to keep things a bit more organized
        //glDrawArrays(GL_LINES, 0, 6);
        //glDrawArrays(GL_LINE_STRIP, 0, 6);
        //glDrawArrays(GL_LINE_LOOP, 0, 6);
        //glDrawArrays(GL_TRIANGLES, 0, 6);
        //glDrawArrays(GL_TRIANGLE_STRIP, 0, 6);
        //glDrawArrays(GL_TRIANGLE_FAN, 0, 6);
        //glPointSize(3.0f);
        glDrawArrays(GL_LINE_STRIP, 0, 607);
        glBindVertexArray(0); // no need to unbind it every time
        //glUseProgram(shaderProgram1);
        //unsigned int transformLoc1 = glGetUniformLocation(shaderProgram1, "transform");
        //glUniformMatrix4fv(transformLoc1, 1, GL_FALSE, glm::value_ptr(modelMatrix));
        glBindVertexArray(VAO1);
        glDrawArrays(GL_TRIANGLE_FAN, 0, 35);
        glBindVertexArray(0);

        // glfw: swap buffers and poll IO events (keys pressed/released, mouse moved etc.)
        // -------------------------------------------------------------------------------
        glfwSwapBuffers(window);
        glfwPollEvents();
    }

    // optional: de-allocate all resources once they've outlived their purpose:
    // ------------------------------------------------------------------------
    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VBO);
    glDeleteProgram(shaderProgram);
    glDeleteVertexArrays(1, &VAO1);
    glDeleteBuffers(1, &VBO1);

    // glfw: terminate, clearing all previously allocated GLFW resources.
    // ------------------------------------------------------------------
    glfwTerminate();
    return 0;
}

// process all input: query GLFW whether relevant keys are pressed/released this frame and react accordingly
// ---------------------------------------------------------------------------------------------------------
void processInput(GLFWwindow* window)
{
    if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
        glfwSetWindowShouldClose(window, true);
    if (glfwGetKey(window, GLFW_KEY_R) == GLFW_PRESS)
    {
        rotateAngle += 1;
    }
    if (glfwGetKey(window, GLFW_KEY_T) == GLFW_PRESS)
    {
        rotateAngle -= 1;
    }
    if (glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS)
    {
        translate_Y += 0.01;
    }
    if (glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS)
    {
        translate_Y -= 0.01;
    }
    if (glfwGetKey(window, GLFW_KEY_D) == GLFW_PRESS)
    {
        translate_X += 0.01;
    }
    if (glfwGetKey(window, GLFW_KEY_A) == GLFW_PRESS)
    {
        translate_X -= 0.01;
    }
    if (glfwGetKey(window, GLFW_KEY_X) == GLFW_PRESS)
    {
        scale_X += 0.01;
    }
    if (glfwGetKey(window, GLFW_KEY_C) == GLFW_PRESS)
    {
        scale_X -= 0.01;
    }
    if (glfwGetKey(window, GLFW_KEY_Y) == GLFW_PRESS)
    {
        scale_Y += 0.01;
    }
    if (glfwGetKey(window, GLFW_KEY_U) == GLFW_PRESS)
    {
        scale_Y -= 0.01;
    }
}

// glfw: whenever the window size changed (by OS or user resize) this callback function executes
// ---------------------------------------------------------------------------------------------
void framebuffer_size_callback(GLFWwindow* window, int width, int height)
{
    // make sure the viewport matches the new window dimensions; note that width and
    // height will be significantly larger than specified on retina displays.
    glViewport(0, 0, width, height);
}